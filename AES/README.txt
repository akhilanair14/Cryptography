This program provides an implementation of the Advanced Encryption Standard Algorithm (AES).
AES is based on a design principle known as a substitution-permutation network, combination of both substitution and permutation, and is fast in both software and hardware. AES has a fixed block size of 128 bits, and a key size of 128, 192, or 256 bits.
The key size used for an AES cipher specifies the number of repetitions of transformation rounds that convert the input, called the plaintext, into the final output, called the ciphertext. The number of cycles of repetition are as follows:
* 10 cycles of repetition for 128-bit keys.
* 12 cycles of repetition for 192-bit keys.
* 14 cycles of repetition for 256-bit keys.
Each round consists of several processing steps, each containing four similar but different stages, including one that depends on the encryption key itself. A set of reverse rounds are applied to transform ciphertext back into the original plaintext using the same encryption key.
  The key can be generated by the program or can be specified on the
command line.  To encrypt or decrypt data of arbitrary length either the
Electronic Code Book (ECB) or the Cipher Block Chaining (CBC) operation modes
must be used.

The program operates on an input file, encrypting or decrypting 1024 bytes at a
time and writing the result to the output file, until End Of File (EOF) is
reached.  When this occurs, the data is padded with zeros to a multiple of 64
bits and the last round of encryption or decryption is performed before the
program exits.  



One option enclosed in {} must be present, options enclosed in [] are optional
  -g		generate a random key and exit if no other options present
  -k key	use key for encryption/decryption
  -e		encrypt message
  -d		decrypt message
  -ecb		use Electronic Code Book mode to encrypt message
  -cbc		use Cipher Block Chaining mode to encrypt message
  -b		encrypt or decrypt a single block (specified in hex with ascii)
  -iv IV	(unsigned long) initialization vector for cbc mode
  -i file	if present read input from file, else from stdin
  -o file	if present write output to file, else to stdout
  -h		print this help and exit



